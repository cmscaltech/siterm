#!/usr/bin/env python
"""
This part of code is taken from:
   https://web.archive.org/web/20160305151936/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/
Please respect developer (Sander Marechal) and always keep a reference to URL and also as kudos to him
Changes applied to this code:
    Dedention (Justas Balcas 07/12/2017)
    pylint fixes: with open, split imports, var names, old style class (Justas Balcas 07/12/2017)
"""
import sys
import time
from DTNRMLibs.Daemonizer import Daemon
from DTNRMLibs.MainUtilities import getConfig, reCacheConfig, getStreamLogger, getLogger
from SiteFE.LookUpService import lookup as LS

CONFIG = getConfig()
COMPONENT = 'LookUpService'
LOGGER = getLogger("%s/%s/" % (CONFIG.get('general', 'logDir'), COMPONENT), CONFIG.get('general', 'logLevel'))


class MyDaemon(Daemon):
    """ My own Deamon override """
    def run(self):
        """ Run main execution """
        timeeq, currentHour = reCacheConfig(None)
        lookThreads = {}
        for sitename in CONFIG.get('general', 'sites').split(','):
            looker = LS.LookUpService(CONFIG, LOGGER, sitename)
            lookThreads[sitename] = looker
        while True:
            try:
                for sitename, lookt in lookThreads.items():
                    LOGGER.info('Start worker for %s site', sitename)
                    lookt.startwork()
                time.sleep(2)
            except KeyboardInterrupt as ex:
                LOGGER.critical("Received KeyboardInterrupt: %s ", ex)
                exit(3)
            except:
                # TODO. Have a way to report this upstream that there was an unknown type except.
                # In this case we can solve these issues if there ar some with any service.
                excType, excValue = sys.exc_info()[:2]
                LOGGER.critical("Error details. ErrorType: %s, ErrMsg: %s", str(excType.__name__), excValue)
                time.sleep(20)
            timeeq, currentHour = reCacheConfig(currentHour)
            if not timeeq:
                LOGGER.info('Re initiating LookUp Service with new configuration from GIT')
                lookThreads = {}
                config = getConfig()
                for sitename in config.get('general', 'sites').split(','):
                    looker = LS.LookUpService(CONFIG, LOGGER, sitename)
                    lookThreads[sitename] = looker


if __name__ == "__main__":
    DAEMON = MyDaemon('/tmp/dtnrm-lookUpService.pid')
    if len(sys.argv) != 2:
        print 'ERROR: Options available: %s ' % DAEMON.availableCommands
        exit(1)
    if sys.argv[1] in DAEMON.availableCommands:
        if sys.argv[1] == 'startforeground':
            LOGGER = getStreamLogger()
        DAEMON.command(sys.argv[1], sys.argv[0])
    else:
        DAEMON.command('', sys.argv[0])
